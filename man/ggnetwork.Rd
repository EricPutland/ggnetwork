% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/ggnetwork.R
\name{ggnetwork}
\alias{ggnetwork}
\title{Convert a network object to a data frame.}
\usage{
ggnetwork(x, layout = "fruchtermanreingold",
  arrow.gap = ifelse(network::is.directed(x), 0.025, 0), ...)
}
\arguments{
\item{x}{an object of class \code{\link[network]{network}}, or any object
that can be coerced to this class, such as an adjacency or incidence matrix,
or an edge list: see \link[network]{edgeset.constructors} and
\link[network]{network} for details. If the object is of class
\code{\link[igraph:igraph-package]{igraph}} and the
\code{\link[intergraph:intergraph-package]{intergraph}} package is installed,
it will be used to convert the object: see
\code{\link[intergraph]{asNetwork}} for details.}

\item{layout}{a network layout supplied by \code{\link[sna]{gplot.layout}}}

\item{arrow.gap}{a parameter that will shorten the network edges in order to
avoid overplotting edge arrows and nodes; defaults to \code{0} when the
network is undirected (no edge shortening), or to \code{0.025} when the
network is directed.}

\item{...}{other parameters that will get passed to the network layout
algorithm as a list}
}
\description{
See the vignette at \url{https://briatte.github.io/ggnetwork/} for a
description of both this function and the rest of the \code{ggnetwork}
package.
}
\examples{
if (require(ggplot2) && require(network)) {

  # source: ?network::flo
  data(flo)

  # data example
  ggnetwork(flo)

  # plot example
  ggplot(ggnetwork(flo), aes(x, y, xend = xend, yend = yend)) +
    geom_edges(alpha = 0.5) +
    geom_nodes(size = 12, color = "white") +
    geom_nodetext(aes(label = vertex.names), fontface = "bold") +
    theme_blank()

  # source: ?network::emon
  data(emon)

  # data example
  ggnetwork(emon[[1]], layout = "target", niter = 100)

  # plot example
  ggplot(ggnetwork(emon[[1]], layout = "kamadakawai", arrow.gap = 0.015),
         aes(x, y, xend = xend, yend = yend)) +
    geom_edges(aes(color = Frequency),
               arrow = arrow(length = unit(10, "pt"), type = "closed")) +
    geom_nodes(aes(size = Formalization)) +
    scale_color_gradient(low = "grey50", high = "tomato") +
    scale_size_area(breaks = 1:3) +
    theme_blank()

}
}

